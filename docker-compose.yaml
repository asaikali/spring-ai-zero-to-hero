services:
  postgres:
    container_name: ai_postgres
    labels:
      # see https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#features.docker-compose.custom-images for details
      org.springframework.boot.service-connection: postgres
    image: "pgvector/pgvector:pg16"
    environment:
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "password"
      PGDATA: "/data/postgres"
    volumes:
      - postgres:/data/postgres
      - ./docker/docker_postgres_init.sql:/docker-entrypoint-initdb.d/docker_postgres_init.sql
    ports:
      - "15432:5432"
    restart: unless-stopped

  pgadmin:
    container_name: ai_pgadmin
    labels:
      org.springframework.boot.ignore: true
    image: "dpage/pgadmin4:latest"
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: "False"
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: "False"
    volumes:
      - pgadmin:/var/lib/pgadmin
      - ./docker/docker_pgadmin_servers.json:/pgadmin4/servers.json
    ports:
      - "15433:80"
    entrypoint:
      - "/bin/sh"
      - "-c"
      - "/bin/echo 'postgres:5432:*:postgres:password' > /tmp/pgpassfile && chmod 600 /tmp/pgpassfile && /entrypoint.sh"
    restart: unless-stopped
  prometheus:
        container_name: prometheus
        image: prom/prometheus:v2.54.0 # https://hub.docker.com/r/prom/prometheus
        extra_hosts: ['host.docker.internal:host-gateway']
        command:
            - --enable-feature=exemplar-storage
            - --web.enable-remote-write-receiver
            - --config.file=/etc/prometheus/prometheus.yml
        volumes:
            - prometheus:/prometheus
            - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
        ports:
            - "9090:9090"
  grafana:
      container_name: grafana
      image: grafana/grafana:11.1.4 # https://hub.docker.com/r/grafana/grafana/tags and https://github.com/grafana/grafana/releases
      extra_hosts: ['host.docker.internal:host-gateway']
      environment:
          - GF_AUTH_ANONYMOUS_ENABLED=true
          - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
          - GF_AUTH_DISABLE_LOGIN_FORM=true
      volumes:
          - ./docker/grafana/grafana.ini:/etc/grafana/grafana.ini:ro
          - ./docker/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources:ro
          - ./docker/grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards:ro
          - ./docker/grafana/provisioning/alerting:/etc/grafana/provisioning/alerting:ro
      ports:
          - "3000:3000"
  tempo-init:
      # Tempo runs as user 10001, and docker compose creates the volume as root.
      # As such, we need to chown the volume in order for Tempo to start correctly.
      # This should not be needed but this is the official solution recommended by Tempo maintainers
      # See: https://github.com/grafana/tempo/blob/a21001a72a5865bfcfc1b0d2dfa30160c5a26103/example/docker-compose/local/docker-compose.yaml
      # See: https://github.com/grafana/tempo/issues/1657
      image: &tempoImage grafana/tempo:2.5.0 # https://hub.docker.com/r/grafana/tempo/tags and https://github.com/grafana/tempo/releases
      user: root
      entrypoint:
          - "chown"
          - "10001:10001"
          - "/var/tempo"
      volumes:
          - tempo:/var/tempo
  tempo:
      container_name: tempo
      image: *tempoImage
      extra_hosts: ['host.docker.internal:host-gateway']
      command: ['-config.file=/etc/tempo.yml']
      depends_on: ['tempo-init']
      volumes:
          - tempo:/var/tempo
          - ./docker/grafana/tempo.yml:/etc/tempo.yml:ro
      ports:
          - "3200:3200"    # tempo
          - "9411:9411"    # zipkin
  loki:
      container_name: loki
      image: grafana/loki:3.0.1 # https://hub.docker.com/r/grafana/loki/tags and https://github.com/grafana/loki/releases
      extra_hosts: ['host.docker.internal:host-gateway']
      command: ['-config.file=/etc/loki/local-config.yaml']
      ports:
          - "3100:3100"
  maildev:
      container_name: maildev
      image: maildev/maildev:2.1.0 # https://hub.docker.com/r/maildev/maildev/tags
      extra_hosts: [ 'host.docker.internal:host-gateway' ]
      ports:
          - "3001:1080"
          - "25:1025"
volumes:
  postgres:
  pgadmin:
  mysql:
  prometheus:
  tempo:
